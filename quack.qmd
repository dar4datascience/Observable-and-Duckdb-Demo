---
title: "Demoing duckdb with Observable"
author: "Daniel Amieva Rodriguez"
date: last-modified
format:
  html:
    theme: cyborg
    message: false
    warning: false
---

## Introduction

Using the starwards R dataset, we will demonstrate how to use duckdb with Observable.

```{r}
library(dplyr)
library(duckdb)

zoomed_starwars <- dplyr::starwars |> 
  select(
    name,
    mass,
    height,
    homeworld,
   # films,
    skin_color
  )

# create duckdb file

quack_conn <- dbConnect(
  duckdb(),
  "starwars.duckdb",
)

dbWriteTable(quack_conn,
             "starwars",
             zoomed_starwars,
             overwrite = TRUE)

dbExecute(quack_conn, "-- write the result of a query to a Parquet file
          
COPY (SELECT * FROM starwars) TO 'starwars.parquet' (COMPRESSION ZSTD);")

dbDisconnect(quack_conn)



ojs_define(ojs_starwars = zoomed_starwars)

```

```{ojs}
starwars = transpose(ojs_starwars)
starwars
```

## Regular Code

```{ojs}
viewof mass_min = Inputs.range(
  [30, 150], 
  {value: 50, step: 1, label: "Mass (min):"}
)
viewof skin_color = Inputs.checkbox(
  ["fair", "gold", "white, blue", "white", "light", "white, red"], 
  { value: ["fair", "gold"], 
    label: "Skin color:"
  }
)
```


```{ojs}
filtered = starwars.filter(function(character) {
  return mass_min < character.mass &&
         skin_color.includes(character.skin_color);
})
```

```{ojs}
Inputs.table(filtered)
```

## Duckdb try

```{ojs}
import {db, duckdb} from '@rlesur/quarto-duckdb'

import {DuckDBClient} from '@cmudig/duckdb'
```


```{ojs}
dbClient = DuckDBClient.of({starwars})
```

```{ojs}
dbClient.query("SELECT * FROM starwars LIMIT 5")
```

```{ojs}
Inputs.table(dbClient.describeColumns({ table: "starwars"}))
```

```{ojs}
queryResult = dbClient.sql`SELECT
  homeworld,
  count(skin_color) as count_skin
FROM
  starwars
GROUP BY
  homeworld
`

queryResult

```

```{ojs}
Plot.plot({
  marks: [
    Plot.barY(queryResult, {x: "homeworld", y: "count_skin"})
  ]
})
``` 


## Params

```{ojs}
viewof mass_minp = Inputs.range(
  [30, 150], 
  {value: 50, step: 1, label: "Mass (min):"}
)
viewof skin_colorp = Inputs.checkbox(
  ["fair", "gold", "white, blue", "white", "light", "white, red"], 
  { value: ["fair", "gold"], 
    label: "Skin color:"
  }
)
```

```{ojs}
queryResultp = dbClient.query(`
  SELECT *
  FROM starwars
  WHERE mass > $1 AND skin_color IN ($2)
`,
[mass_min, skin_color.join(",")]
)

queryResultp
```

```{ojs}
Plot.plot({
  marks: [
    Plot.barY(queryResultp, {x: "homeworld", y: "count_skin", fill: "red"})
  ]
})
```

## Read a .duckdbfile didnt work

```{ojs}

dbClient2 = DuckDBClient.of({starwars: FileAttachment("starwars.duckdb")});
```

## Use Parquet

```{ojs}
dbClient3 = DuckDBClient.of({starwars: FileAttachment("starwars.parquet")});
```

```{ojs}
dbClient3.query("SELECT * FROM starwars LIMIT 5")
```

## Reading Remote Parquets

```{ojs}
function getRemoteFile(url) {
  const baseURL = new URL(url);
  return {
    file: {
      name: baseURL.pathname,
      url: function () {
        return url;
      }
    }
  };
}
```

```{ojs}
db = DuckDBClient.of({
  nba: getRemoteFile("https://llimllib.github.io/nba_data/players_2023.parquet")
})
```

```{ojs}
Inputs.table(db.query("SELECT * FROM nba"))
```
